/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package etla.mod.cfg.form;

import etla.mod.SModConsts;
import etla.mod.SModSysConsts;
import etla.mod.cfg.db.SDbUser;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.JButton;
import sa.lib.SLibConsts;
import sa.lib.SLibUtils;
import sa.lib.db.SDbRegistry;
import sa.lib.gui.SGuiClient;
import sa.lib.gui.SGuiConsts;
import sa.lib.gui.SGuiUtils;
import sa.lib.gui.SGuiValidation;
import sa.lib.gui.bean.SBeanForm;

/**
 *
 * @author Sergio Flores
 */
public class SFormUser extends SBeanForm implements ActionListener {
    
    private SDbUser moRegistry;

    /**
     * Creates new form SFormUser
     */
    public SFormUser(SGuiClient client, String title) {
        setFormSettings(client, SGuiConsts.BEAN_FORM_EDIT, SModConsts.CU_USR, SLibConsts.UNDEFINED, title);
        initComponents();
        initComponentsCustom();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jlName = new javax.swing.JLabel();
        moTextName = new sa.lib.gui.bean.SBeanFieldText();
        jPanel8 = new javax.swing.JPanel();
        jlPassword = new javax.swing.JLabel();
        moPswdPassword = new sa.lib.gui.bean.SBeanFieldPassword();
        jbChangePassword = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jlConfirm = new javax.swing.JLabel();
        moPswdConfirm = new sa.lib.gui.bean.SBeanFieldPassword();
        jPanel9 = new javax.swing.JPanel();
        jlType = new javax.swing.JLabel();
        moKeyType = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel12 = new javax.swing.JPanel();
        jlDesUserId = new javax.swing.JLabel();
        moIntDesUserId = new sa.lib.gui.bean.SBeanFieldInteger();
        jbEditDesUserId = new javax.swing.JButton();
        jlSiie = new javax.swing.JLabel();

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del registro:"));
        jPanel1.setLayout(new java.awt.BorderLayout());

        jPanel2.setLayout(new java.awt.GridLayout(5, 1, 0, 5));

        jPanel4.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlName.setForeground(new java.awt.Color(0, 153, 153));
        jlName.setText("Nombre:*");
        jlName.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel4.add(jlName);

        moTextName.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel4.add(moTextName);

        jPanel2.add(jPanel4);

        jPanel8.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlPassword.setText("Contraseña:*");
        jlPassword.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel8.add(jlPassword);

        moPswdPassword.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel8.add(moPswdPassword);

        jbChangePassword.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sa/lib/img/cmd_std_edit.gif"))); // NOI18N
        jbChangePassword.setToolTipText("Cambiar contraseña");
        jbChangePassword.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel8.add(jbChangePassword);

        jPanel2.add(jPanel8);

        jPanel5.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlConfirm.setText("Confirmar:*");
        jlConfirm.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel5.add(jlConfirm);

        moPswdConfirm.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel5.add(moPswdConfirm);

        jPanel2.add(jPanel5);

        jPanel9.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlType.setText("Tipo:*");
        jlType.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel9.add(jlType);

        moKeyType.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel9.add(moKeyType);

        jPanel2.add(jPanel9);

        jPanel12.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDesUserId.setText("ID user:*");
        jlDesUserId.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel12.add(jlDesUserId);
        jPanel12.add(moIntDesUserId);

        jbEditDesUserId.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sa/lib/img/cmd_std_edit.gif"))); // NOI18N
        jbEditDesUserId.setToolTipText("Modificar");
        jbEditDesUserId.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel12.add(jbEditDesUserId);

        jlSiie.setForeground(java.awt.Color.gray);
        jlSiie.setText("(Primary Key SIIE)");
        jlSiie.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel12.add(jlSiie);

        jPanel2.add(jPanel12);

        jPanel1.add(jPanel2, java.awt.BorderLayout.NORTH);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JButton jbChangePassword;
    private javax.swing.JButton jbEditDesUserId;
    private javax.swing.JLabel jlConfirm;
    private javax.swing.JLabel jlDesUserId;
    private javax.swing.JLabel jlName;
    private javax.swing.JLabel jlPassword;
    private javax.swing.JLabel jlSiie;
    private javax.swing.JLabel jlType;
    private sa.lib.gui.bean.SBeanFieldInteger moIntDesUserId;
    private sa.lib.gui.bean.SBeanFieldKey moKeyType;
    private sa.lib.gui.bean.SBeanFieldPassword moPswdConfirm;
    private sa.lib.gui.bean.SBeanFieldPassword moPswdPassword;
    private sa.lib.gui.bean.SBeanFieldText moTextName;
    // End of variables declaration//GEN-END:variables

    /*
     * Private methods
     */
    
    private void initComponentsCustom() {
        SGuiUtils.setWindowBounds(this, 480, 300);
        
        moTextName.setTextSettings(SGuiUtils.getLabelName(jlName), 16);
        moTextName.setTextCaseType(SLibConsts.UNDEFINED);
        moPswdPassword.setTextSettings(SGuiUtils.getLabelName(jlPassword), 16);
        moPswdConfirm.setTextSettings(SGuiUtils.getLabelName(jlConfirm), 16);
        moKeyType.setKeySettings(miClient, SGuiUtils.getLabelName(jlType), true);
        
        moFields.addField(moTextName);
        moFields.addField(moPswdPassword);
        moFields.addField(moPswdConfirm);
        moFields.addField(moKeyType);
        
        moFields.setFormButton(jbSave);
    }
    
    private void setEnabledPassword(boolean enable) {
        moPswdPassword.setEnabled(enable);
        moPswdConfirm.setEnabled(enable);
        jbChangePassword.setEnabled(!enable);
    }

    private void enableEditDesUserId(boolean enable) {
        moIntDesUserId.setEditable(enable);
        jbEditDesUserId.setEnabled(!enable);
    }
    
    private void actionChangePassword() {
        setEnabledPassword(true);
        moPswdPassword.requestFocus();
    }
    
    private void actionEditDesUserId() {
        enableEditDesUserId(true);
        moIntDesUserId.requestFocus();
    }
    
    /*
     * Public methods
     */
    
    /*
     * Overriden methods
     */
    
    @Override
    public void addAllListeners() {
        jbChangePassword.addActionListener(this);
        jbEditDesUserId.addActionListener(this);
    }

    @Override
    public void removeAllListeners() {
        jbChangePassword.removeActionListener(this);
        jbEditDesUserId.removeActionListener(this);
    }

    @Override
    public void reloadCatalogues() {
        miClient.getSession().populateCatalogue(moKeyType, SModConsts.CS_USR_TP, SLibConsts.UNDEFINED, null);
    }

    @Override
    public void setRegistry(SDbRegistry registry) throws Exception {
        moRegistry = (SDbUser) registry;

        mnFormResult = SLibConsts.UNDEFINED;
        mbFirstActivation = true;

        removeAllListeners();
        reloadCatalogues();

        if (moRegistry.isRegistryNew()) {
            //moRegistry.setCode("");
            
            if (moRegistry.getPkUserId()== SLibConsts.UNDEFINED) {
                moRegistry.setFkUserTypeId(SModSysConsts.CS_USR_TP_USR);
            }
            
            jtfRegistryKey.setText("");
        }
        else {
            jtfRegistryKey.setText(SLibUtils.textKey(moRegistry.getPrimaryKey()));
        }

        moTextName.setValue(moRegistry.getName());
        moPswdPassword.setValue("");
        moPswdConfirm.setValue("");
        moKeyType.setValue(new int[] { moRegistry.getFkUserTypeId() });
        moIntDesUserId.setValue(moRegistry.getDesUserId());

        setFormEditable(true);
        
        if (moRegistry.isRegistryNew()) {
            setEnabledPassword(true);
            enableEditDesUserId(true);
        }
        else {
            setEnabledPassword(false);
            enableEditDesUserId(false);
        }
        
        addAllListeners();
    }

    @Override
    public SDbUser getRegistry() throws Exception {
        SDbUser registry = moRegistry.clone();

        if (registry.isRegistryNew()) {}

        registry.setDesUserId(moIntDesUserId.getValue());
        registry.setName(moTextName.getValue());
        registry.setPassword(new String(moPswdPassword.getPassword()));
        registry.setWeb(false);
        //registry.setDeleted(this.isDeleted());
        //registry.setSystem(this.isSystem());
        registry.setFkUserTypeId(moKeyType.getValue()[0]);
        registry.setFkWebRoleId(SModSysConsts.SS_WEB_ROLE_NA);

        return registry;
    }

    @Override
    public SGuiValidation validateForm() {
        String password = new String(moPswdPassword.getPassword());
        String confirm = new String(moPswdConfirm.getPassword());
        SGuiValidation validation = moFields.validateFields();
        
        if (validation.isValid()) {
            if (moPswdPassword.isEditable() && password.compareTo(confirm) != 0) {
                moPswdPassword.setText("");
                moPswdConfirm.setText("");
                validation.setMessage(SGuiConsts.ERR_MSG_FIELD_VAL_ + "'" + SGuiUtils.getLabelName(jlPassword) + "'" + SGuiConsts.ERR_MSG_FIELD_VAL_EQUAL + "'" + SGuiUtils.getLabelName(jlConfirm) + "'.");
                validation.setComponent(moPswdPassword);
            }
        }
        
        return validation;
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() instanceof JButton) {
            JButton button = (JButton) e.getSource();
            
            if (button == jbChangePassword) {
                actionChangePassword();
            }
            else if (button == jbEditDesUserId) {
                actionEditDesUserId();
            }
        }
    }
}
