/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package etla.mod.etl.form;

import etla.mod.SModConsts;
import etla.mod.cfg.db.SDbConfig;
import etla.mod.etl.db.SDbExchangeRate;
import sa.lib.SLibConsts;
import sa.lib.SLibUtils;
import sa.lib.db.SDbRegistry;
import sa.lib.gui.SGuiClient;
import sa.lib.gui.SGuiConsts;
import sa.lib.gui.SGuiUtils;
import sa.lib.gui.SGuiValidation;
import sa.lib.gui.bean.SBeanForm;

/**
 *
 * @author Sergio Flores
 */
public class SFormExchangeRate extends SBeanForm {
    
    private SDbExchangeRate moRegistry;
    
    /**
     * Creates new form SFormGroup
     * @param client
     * @param title
     */
    public SFormExchangeRate(SGuiClient client, String title) {
        setFormSettings(client, SGuiConsts.BEAN_FORM_EDIT, SModConsts.A_EXR, SLibConsts.UNDEFINED, title);
        initComponents();
        initComponentsCustom();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jlCurrency = new javax.swing.JLabel();
        moKeyCurrency = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel11 = new javax.swing.JPanel();
        jlDate = new javax.swing.JLabel();
        moDateDate = new sa.lib.gui.bean.SBeanFieldDate();
        jPanel12 = new javax.swing.JPanel();
        jlExchangeRate = new javax.swing.JLabel();
        moDecExchangeRate = new sa.lib.gui.bean.SBeanFieldDecimal();
        jPanel5 = new javax.swing.JPanel();

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del registro:"));
        jPanel1.setLayout(new java.awt.BorderLayout(0, 5));

        jPanel2.setLayout(new java.awt.GridLayout(3, 1, 0, 5));

        jPanel6.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlCurrency.setForeground(java.awt.Color.blue);
        jlCurrency.setText("Moneda:*");
        jlCurrency.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel6.add(jlCurrency);

        moKeyCurrency.setPreferredSize(new java.awt.Dimension(300, 23));
        jPanel6.add(moKeyCurrency);

        jPanel2.add(jPanel6);

        jPanel11.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDate.setText("Fecha:*");
        jlDate.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel11.add(jlDate);
        jPanel11.add(moDateDate);

        jPanel2.add(jPanel11);

        jPanel12.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlExchangeRate.setText("Tipo cambio:*");
        jlExchangeRate.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel12.add(jlExchangeRate);
        jPanel12.add(moDecExchangeRate);

        jPanel2.add(jPanel12);

        jPanel1.add(jPanel2, java.awt.BorderLayout.NORTH);

        jPanel5.setLayout(new java.awt.BorderLayout(5, 0));
        jPanel1.add(jPanel5, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JLabel jlCurrency;
    private javax.swing.JLabel jlDate;
    private javax.swing.JLabel jlExchangeRate;
    private sa.lib.gui.bean.SBeanFieldDate moDateDate;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecExchangeRate;
    private sa.lib.gui.bean.SBeanFieldKey moKeyCurrency;
    // End of variables declaration//GEN-END:variables

    /*
     * Private methods
     */
    
    private void initComponentsCustom() {
        SGuiUtils.setWindowBounds(this, 480, 300);
        
        moKeyCurrency.setKeySettings(miClient, SGuiUtils.getLabelName(jlCurrency), true);
        moDateDate.setDateSettings(miClient, SGuiUtils.getLabelName(jlDate), true);
        moDecExchangeRate.setDecimalSettings(SGuiUtils.getLabelName(jlExchangeRate), SGuiConsts.GUI_TYPE_DEC_EXC_RATE, true);
        
        moFields.addField(moKeyCurrency);
        moFields.addField(moDateDate);
        moFields.addField(moDecExchangeRate);
        
        moFields.setFormButton(jbSave);
    }

    /*
     * Public methods
     */
    
    /*
     * Overriden methods
     */
    
    @Override
    public void addAllListeners() {

    }

    @Override
    public void removeAllListeners() {

    }

    @Override
    public void reloadCatalogues() {
        miClient.getSession().populateCatalogue(moKeyCurrency, SModConsts.AS_CUR, SLibConsts.UNDEFINED, null);
    }

    @Override
    public void setRegistry(SDbRegistry registry) throws Exception {
        moRegistry = (SDbExchangeRate) registry;

        mnFormResult = SLibConsts.UNDEFINED;
        mbFirstActivation = true;

        removeAllListeners();
        reloadCatalogues();

        if (moRegistry.isRegistryNew()) {
            moRegistry.setDate(miClient.getSession().getCurrentDate());
            
            jtfRegistryKey.setText("");
        }
        else {
            jtfRegistryKey.setText(SLibUtils.textKey(moRegistry.getPrimaryKey()));
        }

        moKeyCurrency.setValue(new int[] { moRegistry.getPkCurrencyId() });
        moDateDate.setValue(moRegistry.getDate());
        moDecExchangeRate.setValue(moRegistry.getExchangeRate());

        setFormEditable(true);
        
        if (moRegistry.isRegistryNew()) {
        }
        else {
            moKeyCurrency.setEditable(false);
        }
        
        addAllListeners();
    }

    @Override
    public SDbExchangeRate getRegistry() throws Exception {
        SDbExchangeRate registry = moRegistry.clone();

        if (registry.isRegistryNew()) {
            registry.setPkCurrencyId(moKeyCurrency.getValue()[0]);
        }

        registry.setDate(moDateDate.getValue());
        registry.setExchangeRate(moDecExchangeRate.getValue());

        return registry;
    }

    @Override
    public SGuiValidation validateForm() {
        SGuiValidation validation = moFields.validateFields();
        
        if (validation.isValid()) {
            if (moKeyCurrency.getValue()[0] == ((SDbConfig) miClient.getSession().getConfigSystem()).getDbConfigAvista().getFkSrcLocalCurrencyId()) {
                validation.setMessage(SGuiConsts.ERR_MSG_FIELD_DIF + "'" + SGuiUtils.getLabelName(jlCurrency) + "'.");
                validation.setComponent(moKeyCurrency);
            }
        }
        
        return validation;
    }
}
